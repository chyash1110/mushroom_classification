# -*- coding: utf-8 -*-
"""mushroom.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x0naviOF0KqDopfTjaTbhvN8i1vjylBo

#Import Dependencies
"""

import numpy as np
import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt

"""#Import Dataset"""

df = pd.read_csv("mushrooms.csv", sep = ",")

"""#Exploring DataSet"""

df.head()

print(df.shape)

df.describe()

"""#Handling Dupliacte Values"""

df = df.drop_duplicates()

"""#Handling Null Values"""

df.isnull().sum()

df.columns

"""#Drop Insignificant Values"""

columns_to_drop = ['odor', 'gill-size', 'stalk-root', 'stalk-surface-above-ring', 'stalk-surface-below-ring', 'veil-type', 'veil-color', 'ring-number', 'spore-print-color']
df.drop(columns=columns_to_drop, inplace=True)
df.columns

"""#Label Encoding"""

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
columns = ['class', 'cap-shape', 'cap-surface', 'cap-color', 'bruises',
       'gill-attachment', 'gill-spacing', 'gill-color', 'stalk-shape',
       'stalk-color-above-ring', 'stalk-color-below-ring', 'ring-type',
       'population', 'habitat']
for column in columns:
    encoded_values = le.fit_transform(df[column])
    df[column] = encoded_values

df.head()

"""#Splitting Dataset into testing and training"""

from sklearn.model_selection import train_test_split
X = df.drop('class', axis=1)
y = df['class']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""#Making Correlation Matrix"""

correlation_matrix = df.corr()

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("Correlation Matrix")
plt.show()

"""#Confusion Matrix"""

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

def plot_confusion_matrix(y_test, y_pred, target_names):
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=target_names, yticklabels=target_names)
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.title("Confusion Matrix")
    plt.show()

target_names = ["Edible", "Poisonous"]

"""#Logistic Regression"""

from sklearn.linear_model import LogisticRegression

logreg_classifier = LogisticRegression(max_iter=1000, random_state=42)
logreg_classifier.fit(X_train, y_train)
y_pred = logreg_classifier.predict(X_test)

print(classification_report(y_test, y_pred, target_names=target_names))
plot_confusion_matrix(y_test, y_pred, target_names)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

"""#Gaussian Naive Bias"""

from sklearn.naive_bayes import GaussianNB

nb_classifier = GaussianNB()
nb_classifier.fit(X_train, y_train)
y_pred = nb_classifier.predict(X_test)

print(classification_report(y_test, y_pred, target_names=target_names))
plot_confusion_matrix(y_test, y_pred,target_names)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

"""#KNN"""

from sklearn.neighbors import KNeighborsClassifier

knn_classifier = KNeighborsClassifier(n_neighbors=5)
knn_classifier.fit(X_train, y_train)
y_pred = knn_classifier.predict(X_test)

print(classification_report(y_test, y_pred, target_names=target_names))
plot_confusion_matrix(y_test, y_pred, target_names)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

"""#Save Model"""

import joblib
joblib.dump(knn_classifier, 'knn_model.pkl')